import cv2  # opencv默认打开图像格式是BGR，而不是RGB
import matplotlib
import matplotlib.pyplot as plt
import numpy
from matplotlib import pyplot

import opencv_test

# 模板匹配
img = cv2.imread("P:/Matlab_Practice/picture/lena.PNG", cv2.COLOR_RGB2GRAY)
template = cv2.imread("P:/Matlab_Practice/picture/face.PNG", cv2.COLOR_RGB2GRAY)
h, w = template.shape[: 2]
# 一般情况下采用归一化的三个参数，效果更好
# TM_CCORR:计算相关性，计算出来的值越大，越相关
# TM_SQDIFF:计算平方不同，计算出来的值越小，越相关
# TM_CCOEFF:计算相关系数，计算出来的值越大，越相关
# TM_SQDIFF_NORMED:计算归一化平方不同，计算出来的值越接近0，越相关
# TM_CCORR_NORMED:计算归一化相关性，计算出来的值越接近1，越相关
# TM_CCOEFF_NORMED:计算归一化系数，计算出来的值越接近1，越相关
methods = ["cv2.TM_CCORR", "cv2.TM_SQDIFF", "cv2.TM_CCOEFF", "cv2.TM_SQDIFF_NORMED", "cv2.TM_CCORR_NORMED", "cv2.TM_CCOEFF_NORMED"]
for meth in methods:
    img2 = img.copy()
    #匹配方法的真值
    method = eval(meth)
    print(method)
    res = cv2.matchTemplate(img, template, method)
    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
    #如果是平方差匹配TM_SQDIFF 或归一化平方差匹配TM_SQDIFF_NORMED,取最小值
    if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:
        top_left = min_loc
    else:
        top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)
    #画矩形
    cv2.rectangle(img2, top_left, bottom_right, 255, 2)
    pyplot.subplot(121), plt.imshow(res, cmap="gray")
    pyplot.xticks([]), pyplot.yticks([])    #隐藏坐标轴
    pyplot.subplot(122), pyplot.imshow(img2, cmap="gray")
    pyplot.xticks([]), pyplot.yticks([])
    pyplot.suptitle(meth)
    pyplot.show()
# 匹配多个图像
img_rgb = cv2.imread("P:/Matlab_Practice/picture/mario.PNG")
img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)
template = cv2.imread("P:/Matlab_Practice/picture/mario_coin.PNG", 0)
h, w = template.shape[:2]
res = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)
threshold = 0.8
# 取匹配程度大于80%的坐标
loc = numpy.where(res >= threshold)
for pt in zip(*loc[::-1]):  # *号表示可选参数
    bottom_right = (pt[0] + w, pt[1] + h)
    cv2.rectangle(img_rgb, pt, bottom_right, (0, 0, 255), 1)
cv2.imshow("img_rgb", img_rgb)
cv2.waitKey(0)
cv2.destroyAllWindows()
